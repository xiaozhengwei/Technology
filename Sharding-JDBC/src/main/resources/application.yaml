spring:
  shardingsphere:
    # 数据源配置
    datasource:
      common:
        # 数据库驱动类名
        driver-class-name: com.mysql.cj.jdbc.Driver
        # 数据库连接池类名称
        type: com.zaxxer.hikari.HikariDataSource
      # 数据源名称，多数据源以逗号分隔
      names: db1,db2
      db1:
        jdbc-url: jdbc:mysql://rm-2ze2z766loml0355klo.mysql.rds.aliyuncs.com:3306/store
        username: superadmin
        password: Zw199801190!
      db2:
        jdbc-url: jdbc:mysql://82.157.103.184:3306/store
        username: root
        password: 1998zh2003.
    # 规则配置
    rules:
      sharding:
        # 分片算法配置
        sharding-algorithms:
          database-inline:
            # 分片算法类型 https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/
            type: INLINE
            props:
              # 分片算法的行表达式
              algorithm-expression: db$->{ order_id % 2 + 1 }
          table-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{ order_id % 2 + 1 }

        # 分布式序列算法配置
        key-generators:
          snowflake:
            # 分布式序列算法（雪花算法：SNOWFLAKE； UUID：UUID）（注：UUID没有props配置） https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen/
            type: SNOWFLAKE
            # 分布式序列算法属性配置
            props:
              # 工作机器唯一标识
              worker-id: 1
        tables:
          # 逻辑表名称
          t_order:
            # 行表达式标识符可以使用 ${...} 或 $->{...}，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 $->{...}
            actual-data-nodes: db$->{1..2}.t_order_$->{1..2}
            # 分表策略
            database-strategy:
              standard:
                # 分片列名称
                sharding-column: order_id
                # 分片算法名称
                sharding-algorithm-name: database-inline
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: table_inline
    # 属性配置
    props:
      # 展示修改以后的sql语句
      sql-show: true

mybatis:
  config-location: classpath:mybatis/mybatis-config.xml
  mapper-locations: classpath:mybatis/mapper/**/*.xml

